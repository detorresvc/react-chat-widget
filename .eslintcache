[{"/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/reportWebVitals.js":"1","/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/graphql/client.js":"2","/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/scenes/register/Register.js":"3","/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/container/room/Room.js":"4","/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/components/Icon.js":"5","/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/components/partials/RightPane.js":"6","/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/App.js":"7","/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/scenes/main/Main.js":"8","/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/scenes/login/Login.js":"9","/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/container/message/PlaceHolderAttachment.js":"10","/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/components/InputWithLabel.js":"11","/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/components/partials/Container.js":"12","/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/components/partials/LeftPane.js":"13","/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/components/Button.js":"14","/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/scenes/widget/Widget.js":"15","/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/container/message/FormMessage.js":"16","/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/components/InputText.js":"17","/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/container/message/Message.js":"18"},{"size":362,"mtime":1607308680356,"results":"19","hashOfConfig":"20"},{"size":2749,"mtime":1607321957010,"results":"21","hashOfConfig":"20"},{"size":3362,"mtime":1607309661038,"results":"22","hashOfConfig":"20"},{"size":3223,"mtime":1607313217962,"results":"23","hashOfConfig":"20"},{"size":8137,"mtime":1607308680340,"results":"24","hashOfConfig":"20"},{"size":208,"mtime":1607309730454,"results":"25","hashOfConfig":"20"},{"size":1141,"mtime":1607308680317,"results":"26","hashOfConfig":"20"},{"size":1528,"mtime":1607309668961,"results":"27","hashOfConfig":"20"},{"size":2766,"mtime":1607309675749,"results":"28","hashOfConfig":"20"},{"size":1287,"mtime":1607325525870,"results":"29","hashOfConfig":"20"},{"size":178,"mtime":1607308680343,"results":"30","hashOfConfig":"20"},{"size":174,"mtime":1607309711204,"results":"31","hashOfConfig":"20"},{"size":183,"mtime":1607309727448,"results":"32","hashOfConfig":"20"},{"size":181,"mtime":1607308680339,"results":"33","hashOfConfig":"20"},{"size":4462,"mtime":1607325363913,"results":"34","hashOfConfig":"20"},{"size":2316,"mtime":1607325508319,"results":"35","hashOfConfig":"20"},{"size":181,"mtime":1607308680342,"results":"36","hashOfConfig":"20"},{"size":6115,"mtime":1607325629285,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"t7a42m",{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/reportWebVitals.js",[],["80","81"],"/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/graphql/client.js",["82","83","84"],"import { ApolloClient, InMemoryCache, ApolloProvider, useMutation, gql, createHttpLink, useQuery, split, useSubscription, useLazyQuery } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { onError } from \"@apollo/client/link/error\";\nimport { setContext } from '@apollo/client/link/context';\nimport Cookies from 'js-cookie';\nimport { toast } from 'react-toastify';\nimport { createUploadLink } from 'apollo-upload-client';\nimport cache from './cache';\n\nconst wsLink = new WebSocketLink({\n  uri: process.env.REACT_APP_WS,\n  options: {\n    reconnect: true,\n    connectionParams: {\n      authorization: `Bearer ${Cookies.get('echat:token') || ''}`,\n    }\n  }\n});\n\nconst httpLink = createUploadLink({\n  uri: process.env.REACT_APP_API,\n});\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  wsLink,\n  httpLink,\n);\n\nconst link = onError(({ graphQLErrors, networkError, operation, response }) => {\n    \n  if ([\"onGetConsumer\", \"onWigetLogIn\"].indexOf(operation.operationName) > -1) {\n    return response.errors = null;\n  }\n\n  if (graphQLErrors){\n    \n    graphQLErrors.map(({ message, locations, path }) =>\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n      ),\n    );\n    toast.warning(graphQLErrors[0].message, { position: 'top-center' })\n  }\n\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = Cookies.get('echat:token') || null;\n  // return the headers to the context so httpLink can read them\n\n  if(token)\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `Bearer ${token}` : \"\",\n      }\n    }\n  \n  return {\n    headers\n  }\n});\n\nconst defaultOptions = {\n  watchQuery: {\n    fetchPolicy: 'network-only',\n    errorPolicy: 'ignore',\n  },\n  query: {\n    fetchPolicy: 'network-only',\n    errorPolicy: 'all',\n  },\n  mutate: {\n    errorPolicy: 'all',\n  },\n};\n\nconst typePolicies = {\n  Query: {\n    fields: {\n      roomMessages: {\n        keyArgs: false,\n        merge(existing = [], incoming) {\n          \n         console.log(existing, incoming)\n          return existing\n        },\n      }\n    }\n  }\n}\n\n\n\nconst client = new ApolloClient({\n  link: authLink.concat(link).concat(splitLink),\n  cache,\n  defaultOptions\n});\n\nexport {\n  ApolloProvider,\n  useMutation,\n  useQuery,\n  useSubscription,\n  gql,\n  cache,\n  useLazyQuery\n}\n\nexport default client",["85","86"],"/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/scenes/register/Register.js",[],"/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/container/room/Room.js",["87"],"\nimport React,{ useEffect } from 'react';\nimport { useQuery, gql } from 'graphql/client';\nimport moment from 'moment';\n\nconst ROOM_LIST = gql`\nquery getUserRoom {\n  userRooms {\n    id,\n    name,\n    user_id,\n    created_at,\n    updated_at,\n    latest_message {\n      message\n    }\n  }\n}\n`;\n\nconst ROOM_ADDED = gql`\nsubscription OnRoomAdded{\n  roomAdded {\n    id\n    name,\n    user_id,\n    created_at,\n    updated_at,\n    latest_message {\n      message\n    }\n  }\n}\n`;\n\nconst ROOM_UPDATED = gql`\nsubscription OnRoomUpdated{\n  roomUpdated {\n    id\n    name,\n    user_id,\n    created_at,\n    updated_at,\n    latest_message {\n      message\n    }\n  }\n}\n`;\n\nfunction Room({ onSelect, selected }){\n\n  const { data: { userRooms } = { userRooms: [] }, subscribeToMore,  stopPolling, networkStatus } = useQuery(ROOM_LIST, { \n    notifyOnNetworkStatusChange: true,\n    pollInterval: 60000\n   })\n  \n  useEffect(() => {  \n    return () => {\n      stopPolling()\n    }\n  }, [stopPolling])\n\n  const subscribeToNewRoom = () => {\n    return networkStatus === 7 && subscribeToMore({\n      document: ROOM_ADDED,\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data)    return prev;\n  \n        const newFeedItem = subscriptionData.data.roomAdded;\n        return {\n          userRooms: [\n            newFeedItem,\n            ...prev.userRooms, \n          ]\n        }\n      }\n    })\n  }\n\n  const subscribeToUpdatedRoom = () => {\n    return networkStatus === 7 && subscribeToMore({\n      document: ROOM_UPDATED,\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n        \n        const newFeedItem = subscriptionData.data.roomUpdated;\n        \n        return {\n          userRooms: prev.userRooms.map(prevRoom => {\n            \n            if(+prevRoom.id === +newFeedItem.id)\n              return newFeedItem\n            return prevRoom\n          })\n        }\n      }\n    })\n  }\n\n  useEffect(() => {\n    const unsubscribeToNewRoom = subscribeToNewRoom()\n    const unsubscribeToUpdatedRoom = subscribeToUpdatedRoom()\n\n    return () => {\n      if(unsubscribeToNewRoom) unsubscribeToNewRoom()\n      if(unsubscribeToUpdatedRoom) unsubscribeToUpdatedRoom()\n    }\n  }, [networkStatus])\n\n  return (\n    <div \n      className=\"flex flex-col calc(100vh - 81px)\"\n      style={{\n        height: 'calc(100vh - 81px)'\n      }}\n    >\n      {userRooms.map(room => {\n\n        const m1 = moment(new Date());\n        const m2 = moment(room.updated_at, \"MM/DD/YYYY HH:mm:ss A\");\n\n        return (\n          <div \n            onClick={onSelect(room)}\n            key={`${room.type}${room.id}`} \n            className={`h-20 cursor-pointer overflow-hidden border-b border-gray-300 flex items-center p-2 ${room.id === selected ? 'bg-gray-100' : ''}`}>\n            <div className=\"flex flex-col w-full\">\n              <p>{room.name}</p>\n              <div className=\"flex\">\n                <p className=\"text-xs flex-1 truncate\">{room.latest_message?.message}</p>\n                <p className=\"text-xs self-justify-end\">{moment.duration(m2.diff(m1)).humanize(true)}</p>\n              </div>\n            </div>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Room","/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/components/Icon.js",[],"/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/components/partials/RightPane.js",[],"/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/App.js",[],"/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/scenes/main/Main.js",[],["88","89"],"/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/scenes/login/Login.js",[],"/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/container/message/PlaceHolderAttachment.js",["90"],"/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/components/InputWithLabel.js",[],["91","92"],"/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/components/partials/Container.js",[],"/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/components/partials/LeftPane.js",[],"/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/components/Button.js",[],"/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/scenes/widget/Widget.js",["93"],"/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/container/message/FormMessage.js",[],"/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/components/InputText.js",[],"/Users/vincentc.detorres/geekhives/chat-support/react-chat/src/container/message/Message.js",["94","95"],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":1,"column":24,"nodeType":"102","messageId":"103","endLine":1,"endColumn":37},{"ruleId":"100","severity":1,"message":"104","line":1,"column":73,"nodeType":"102","messageId":"103","endLine":1,"endColumn":87},{"ruleId":"100","severity":1,"message":"105","line":88,"column":7,"nodeType":"102","messageId":"103","endLine":88,"endColumn":19},{"ruleId":"96","replacedBy":"106"},{"ruleId":"98","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":109,"column":6,"nodeType":"110","endLine":109,"endColumn":21,"suggestions":"111"},{"ruleId":"96","replacedBy":"112"},{"ruleId":"98","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":28,"column":7,"nodeType":"116","endLine":28,"endColumn":130},{"ruleId":"96","replacedBy":"117"},{"ruleId":"98","replacedBy":"118"},{"ruleId":"108","severity":1,"message":"119","line":85,"column":6,"nodeType":"110","endLine":85,"endColumn":8,"suggestions":"120"},{"ruleId":"108","severity":1,"message":"121","line":194,"column":6,"nodeType":"110","endLine":194,"endColumn":21,"suggestions":"122"},{"ruleId":"108","severity":1,"message":"123","line":209,"column":6,"nodeType":"110","endLine":209,"endColumn":21,"suggestions":"124"},"no-native-reassign",["125"],"no-negated-in-lhs",["126"],"no-unused-vars","'InMemoryCache' is defined but never used.","Identifier","unusedVar","'createHttpLink' is defined but never used.","'typePolicies' is assigned a value but never used.",["125"],["126"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'subscribeToNewRoom' and 'subscribeToUpdatedRoom'. Either include them or remove the dependency array.","ArrayExpression",["127"],["125"],["126"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["125"],["126"],"React Hook useEffect has missing dependencies: 'access_key', 'token', and 'widgetLogin'. Either include them or remove the dependency array.",["128"],"React Hook useEffect has a missing dependency: 'subscribeToNewMessage'. Either include it or remove the dependency array.",["129"],"React Hook useEffect has a missing dependency: 'onHandlefetchMore'. Either include it or remove the dependency array.",["130"],"no-global-assign","no-unsafe-negation",{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},"Update the dependencies array to be: [networkStatus, subscribeToNewRoom, subscribeToUpdatedRoom]",{"range":"139","text":"140"},"Update the dependencies array to be: [access_key, token, widgetLogin]",{"range":"141","text":"142"},"Update the dependencies array to be: [networkStatus, subscribeToNewMessage]",{"range":"143","text":"144"},"Update the dependencies array to be: [networkStatus, onHandlefetchMore]",{"range":"145","text":"146"},[2225,2240],"[networkStatus, subscribeToNewRoom, subscribeToUpdatedRoom]",[1796,1798],"[access_key, token, widgetLogin]",[4051,4066],"[networkStatus, subscribeToNewMessage]",[4380,4395],"[networkStatus, onHandlefetchMore]"]